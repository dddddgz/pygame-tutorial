import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.CDMz6GEI.js";const o=JSON.parse('{"title":"事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"event-loop.md","filePath":"event-loop.md"}'),e={name:"event-loop.md"},p=n(`<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1><p>创建了窗口后，我们使用了一些代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">running </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> running:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame.event.get():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QUIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            running </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pygame.display.flip()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pygame.quit()</span></span></code></pre></div><p>这是一个 Pygame 事件循环。首先，设置一个变量 <code>running</code>，用于标记程序是否还在运行。如果还在运行，就进入 while 循环，检测事件。</p><p><code>pygame.event.get()</code> 可以获取目前需要遍历的所有事件。例如，你动了动鼠标，按了按键盘上的某个按键，把窗口关掉了，等等。这里，我们用变量 <code>event</code> 遍历事件列表，如果 <code>event.type</code>（事件的类型）是 <code>pygame.QUIT</code>（按下了右上角的关闭窗口键），就设置 <code>running</code> 为 False，从而退出循环 。</p><p>至于为什么把 <code>pygame.display.flip()</code> 写在 for 循环后面，习惯而已，不必较真。</p><p>通常，我们还会限定程序的帧率。这在绘制动画的时候很有用，有时候 <code>pygame.event.get()</code> 返回空列表，每一帧的动画就会变快；有时候事件多，动画就会变慢。因此，我们需要限制帧率。</p><p>当然，你不能把帧率设置为电脑做不到的帧率。<s>电脑能做到的最大帧率跟很多因素有关（我也不清楚），</s>不过普通程序 30 ~ 60 fps 已经够用了。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame.time.Clock()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">running </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> running:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clock.tick(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame.event.get():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QUIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            running </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pygame.display.flip()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pygame.quit()</span></span></code></pre></div><p><code>clock.tick()</code> 的原理是：第一次调用，先在 <code>Clock</code> 对象里记录时间，第二次调用与第一次进行比较，分几种情况：</p><ul><li>时间还不到（例如上面程序设置为 30fps，那么循环应该每 1/30 秒执行一次），就等到了再给下面的程序“放行”。</li><li>时间到了或超过了，直接执行下面的程序。</li></ul><blockquote><p>注：每一次调用都会记录调用时间。</p></blockquote>`,12),t=[p];function l(h,k,d,E,r,c){return a(),i("div",null,t)}const y=s(e,[["render",l]]);export{o as __pageData,y as default};
